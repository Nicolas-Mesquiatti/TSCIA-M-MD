import pandas as pd
import os
import math
from tabulate import tabulate

# Carpeta base
BASE = os.path.expanduser(r"~")
# Carpeta del proyecto (ruta fija)
CARPETA = r"D:\Desarrollo de sistemas\bd-ejercicio\proyecto1"


# Helpers para campos ID y generaci√≥n de nuevos IDs
def is_id_field(field_name: str) -> bool:
    """Devuelve True si el nombre del campo parece ser un identificador (ej. 'id', 'id_cliente', 'ID')."""
    if not isinstance(field_name, str):
        return False
    n = field_name.strip().lower()
    # Reglas simples: empieza por 'id' o contiene 'id_' o termina en '_id' o es exactamente 'id'
    return n == "id" or n.startswith("id") or n.startswith("id_") or n.endswith("_id") or ("id" in n and n.startswith("id"))


def get_main_id_field(registro: dict) -> str:
    """Encuentra el campo ID principal de un registro."""
    id_fields = [f for f in registro.keys() if is_id_field(f)]
    # Preferir campos que empiecen con 'id' seguido de algo
    for field in id_fields:
        if field.lower().startswith('id_') or field.lower() == 'id':
            return field
    # Si no encuentra, usar el primer campo ID
    return id_fields[0] if id_fields else None


def get_modifiable_fields(registro: dict) -> list:
    """Devuelve la lista de campos que pueden modificarse (excluye campos id)."""
    return [f for f in registro.keys() if not is_id_field(f)]


def generate_new_id(tabla: list, id_field: str):
    """Intenta generar un nuevo id entero a partir del m√°ximo existente + 1.
    Si no puede, devuelve la longitud actual (como fallback) o cadena vac√≠a si no aplica.
    """
    try:
        valores = [r.get(id_field) for r in tabla if id_field in r]
        nums = []
        for v in valores:
            try:
                nums.append(int(float(v)))  # Convertir a float primero y luego a int
            except Exception:
                # Ignorar valores no convertibles
                pass
        if nums:
            return max(nums) + 1
        else:
            return len(tabla) + 1
    except Exception:
        return ""

# Leer CSV y convertir en diccionarios ---
def cargar_tablas():
    def read_csv_records(fname):
        ruta = os.path.join(CARPETA, fname)
        if not os.path.exists(ruta):
            print(f" Advertencia: archivo no encontrado: {ruta} -> se usar√° tabla vac√≠a.")
            return []
        try:
            return pd.read_csv(ruta).to_dict(orient="records")
        except Exception as e:
            print(f" Error leyendo {ruta}: {e}")
            return []

    mapping = {
        "clientes": "clientes.csv",
        "localidades": "localidades.csv",
        "provincias": "provincias.csv",
        "productos": "productos.csv",
        "rubros": "rubros.csv",
        "sucursales": "sucursales.csv",
        "facturaenc": "facturaenc.csv",
        "facturadet": "facturadet.csv",
        "ventas": "ventas.csv",
        "proveedores": "proveedores.csv",
    }

    tablas = {}
    for key, fname in mapping.items():
        tablas[key] = read_csv_records(fname)

    return tablas


def guardar_todo(tablas):
    """Guarda cada tabla del diccionario en CARPETA con nombre clave.csv"""
    print("\n Guardando todos los cambios (CSV)...")
    if not os.path.isdir(CARPETA):
        os.makedirs(CARPETA, exist_ok=True)
    for key, tabla in tablas.items():
        fname = f"{key}.csv"
        ruta = os.path.join(CARPETA, fname)
        try:
            pd.DataFrame(tabla).to_csv(ruta, index=False)
            print(f" Guardado: {ruta}")
        except Exception as e:
            print(f" Error guardando {ruta}: {e}")
    print(" Archivos CSV actualizados correctamente.\n")


def exportar_tabla_json(tabla, nombre):
    """Exporta una tabla (lista de dicts) a JSON limpiando tipos no serializables
    y reemplazando NaN/NA/NaT/inf por JSON null.
    """
    import json
    import math
    import numpy as np
    import pandas as pd

    ruta = os.path.join(CARPETA, f"{nombre}.json")

    def sanitize_val(v):
        # Manejar pandas/NumPy NA/NaN/NaT -> None
        try:
            if pd.isna(v):
                return None
        except Exception:
            pass

        # Numpy types -> nativos
        if isinstance(v, (np.integer,)):
            return int(v)
        if isinstance(v, (np.floating,)):
            f = float(v)
            if math.isnan(f) or math.isinf(f):
                return None
            return f
        if isinstance(v, (np.bool_,)):
            return bool(v)
        if isinstance(v, (np.ndarray,)):
            # convertir arrays a listas sanitizadas
            return [sanitize_val(x) for x in v.tolist()]

        # pandas Timestamp / datetime -> ISO string
        try:
            if hasattr(v, "isoformat"):
                return v.isoformat()
        except Exception:
            pass

        # Valores ya serializables (str, int, bool, None)
        return v

    safe = []
    for rec in tabla:
        if not isinstance(rec, dict):
            safe.append(rec)
            continue
        clean = {}
        for k, v in rec.items():
            clean[k] = sanitize_val(v)
        safe.append(clean)

    try:
        # json.dump escribir√° None como null
        with open(ruta, "w", encoding="utf-8") as f:
            json.dump(safe, f, ensure_ascii=False, indent=2)
        print(f" Tabla '{nombre}' exportada a {ruta}")
    except Exception as e:
        print(" Error exportando a JSON:", e)


def guardar_todo_json(tablas):
    """Guarda todas las tablas en archivos JSON en CARPETA."""
    print("\n Guardando todos los cambios (JSON)...")
    for nombre, tabla in tablas.items():
        exportar_tabla_json(tabla, nombre)
    print(" Archivos JSON actualizados correctamente.\n")


def normalize_id_value(value):
    """Normaliza un valor de ID para comparaci√≥n, convirtiendo a float y luego a int si es posible."""
    if value is None or value == '' or value == '-':
        return None
    try:
        # Convertir a float primero y luego verificar si es entero
        float_val = float(value)
        if float_val.is_integer():
            return int(float_val)
        return float_val
    except (ValueError, TypeError):
        return str(value).strip()


# Mostrar tabla con formato organizado usando tabulate - MODIFICADA
def mostrar_tabla(tabla, nombre):
    print(f"\n{'='*80}")
    print(f"üìä TABLA: {nombre.upper()} ({len(tabla)} registros)")
    print(f"{'='*80}")
    
    if not tabla:
        print("‚ùå La tabla est√° vac√≠a")
        return
    
    # Convertir a DataFrame para mejor manejo
    df = pd.DataFrame(tabla)
    
    # Crear una copia para mostrar, normalizando los valores num√©ricos
    df_display = df.copy()
    
    # Normalizar valores num√©ricos para mostrar sin .0 si son enteros
    for col in df_display.columns:
        if is_id_field(col) or is_numeric_field(col):
            df_display[col] = df_display[col].apply(lambda x: 
                int(float(x)) if x != '' and x is not None and str(x).replace('.', '').replace('-', '').isdigit() and float(x).is_integer() 
                else x
            )
    
    # Reemplazar valores nulos o vac√≠os para mejor visualizaci√≥n
    df_display = df_display.fillna('').replace('', '-')
    
    # MOSTRAR SIN √çNDICE AUTOM√ÅTICO - solo los IDs reales de la base de datos
    print(tabulate(df_display, headers='keys', tablefmt='grid', showindex=False, numalign='center', stralign='left'))
    print(f"{'='*80}")


# Men√∫ de selecci√≥n 
def menu():
    tablas = cargar_tablas()

    while True:
        nombres = list(tablas.keys())
        print("\n" + "="*50)
        print(" SISTEMA DE GESTI√ìN DE BASE DE DATOS")
        
        print("\nüìã Tablas disponibles:")
        for i, nombre in enumerate(nombres, start=1):
            count = len(tablas[nombre])
            print(f"  {i}. {nombre:15} ({count} registros)")

        # Opciones globales
        print(f"\nüíæ Opciones globales:")
        print(f"  {len(nombres) + 1}. Guardar todo (CSV)")
        print(f"  {len(nombres) + 2}. Guardar todo (JSON)")
        print(f"  {len(nombres) + 3}. Salir")

        try:
            opcion = int(input(f"\nüéØ Elige una tabla por n√∫mero (1-{len(nombres)}): "))
        except ValueError:
            print("‚ùå Opci√≥n inv√°lida. Ingresa un n√∫mero.")
            continue

        # Manejar opciones globales
        if opcion == len(nombres) + 1:
            guardar_todo(tablas)
            continue

        if opcion == len(nombres) + 2:
            guardar_todo_json(tablas)
            continue

        if opcion == len(nombres) + 3:
            print(" Saliendo del programa...")
            break

        if opcion < 1 or opcion > len(nombres):
            print("‚ùå N√∫mero fuera de rango.")
            continue

        nombre_tabla = nombres[opcion - 1]
        tabla = tablas[nombre_tabla]
        mostrar_tabla(tabla, nombre_tabla)

        # Submen√∫ por tabla
        while True:
            print(f"\nüõ†Ô∏è  OPCIONES PARA: {nombre_tabla.upper()}")
            # Encontrar el campo ID principal para mostrar en los mensajes
            id_field = None
            if tabla:
                id_field = get_main_id_field(tabla[0])
            
            accion = input("(A)gregar / (M)odificar / (B)orrar / (E)xportar / (V)olver: ").strip().lower()

            if accion == "v":
                break

            elif accion == "a":
                # Agregar: no pedir campos identificadores (id)
                nuevo = {}
                campos = list(tabla[0].keys()) if tabla else []
                for campo in campos:
                    if is_id_field(campo):
                        # Generar id autom√°ticamente si es posible
                        nuevo[campo] = generate_new_id(tabla, campo)
                    else:
                        raw = input(f"üìù Ingrese {campo}: ")
                        nuevo[campo] = parse_input_value(campo, raw)
                tabla.append(nuevo)
                if id_field and id_field in nuevo:
                    print(f"‚úÖ Registro agregado con {id_field} {nuevo[id_field]}")
                else:
                    print("‚úÖ Registro agregado")
                mostrar_tabla(tabla, nombre_tabla)

                # Preguntar si se desea guardar la tabla en CSV/JSON/both inmediatamente
                guardar_choice = input("üíæ Guardar cambios para esta tabla ahora? (C)SV / (J)SON / (B)oth / (N)o: ").strip().lower()
                if guardar_choice == 'c':
                    pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                    print("‚úÖ Guardado CSV de la tabla.")
                elif guardar_choice == 'j':
                    exportar_tabla_json(tabla, nombre_tabla)
                elif guardar_choice == 'b':
                    pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                    exportar_tabla_json(tabla, nombre_tabla)

            elif accion == "m":
                if not id_field:
                    print("‚ùå No se puede identificar el campo ID para modificar")
                    continue
                    
                try:
                    # Pedir el ID real de la base de datos, no el √≠ndice autom√°tico
                    id_valor = input(f"üîß Ingrese el {id_field} del registro a modificar: ").strip()
                    # Buscar el registro por el ID real usando comparaci√≥n normalizada
                    registro_idx = None
                    for idx, registro in enumerate(tabla):
                        registro_id_valor = registro.get(id_field, '')
                        # Normalizar ambos valores para comparaci√≥n
                        if normalize_id_value(registro_id_valor) == normalize_id_value(id_valor):
                            registro_idx = idx
                            break
                    
                    if registro_idx is None:
                        print(f"‚ùå No se encontr√≥ registro con {id_field} = {id_valor}")
                        continue
                        
                except ValueError:
                    print("‚ùå Ingrese un valor v√°lido.")
                    continue

                if 0 <= registro_idx < len(tabla):
                    campos_mod = get_modifiable_fields(tabla[registro_idx])
                    if not campos_mod:
                        print("‚ÑπÔ∏è  No hay campos modificables en este registro.")
                        continue

                    print("üìù Campos modificables:")
                    for i_c, campo in enumerate(campos_mod, start=1):
                        valor_actual = tabla[registro_idx].get(campo, 'N/A')
                        # Mostrar valor normalizado
                        valor_normalizado = normalize_id_value(valor_actual)
                        if valor_normalizado is not None:
                            print(f"  {i_c}. {campo} = {valor_normalizado}")
                        else:
                            print(f"  {i_c}. {campo} = {valor_actual}")
                    print("  T. Modificar todos los campos anteriores")
                    elec = input("üéØ Elija el n√∫mero del campo a modificar (o 'T'): ").strip().lower()
                    if elec == 't':
                        for campo in campos_mod:
                            valor_actual = tabla[registro_idx].get(campo, 'N/A')
                            valor_normalizado = normalize_id_value(valor_actual)
                            if valor_normalizado is not None:
                                valor = input(f"üìù {campo} [{valor_normalizado}]: ")
                            else:
                                valor = input(f"üìù {campo} [{valor_actual}]: ")
                            if valor:
                                tabla[registro_idx][campo] = parse_input_value(campo, valor)
                    else:
                        try:
                            sel = int(elec) - 1
                        except ValueError:
                            print("‚ùå Ingrese un n√∫mero v√°lido o 'T'.")
                            continue
                        if 0 <= sel < len(campos_mod):
                            campo = campos_mod[sel]
                            valor_actual = tabla[registro_idx].get(campo, 'N/A')
                            valor_normalizado = normalize_id_value(valor_actual)
                            if valor_normalizado is not None:
                                valor = input(f"üìù {campo} [{valor_normalizado}]: ")
                            else:
                                valor = input(f"üìù {campo} [{valor_actual}]: ")
                            if valor:
                                tabla[registro_idx][campo] = parse_input_value(campo, valor)
                        else:
                            print("‚ùå N√∫mero de campo inv√°lido.")

                    print("‚úÖ Registro modificado.")
                    mostrar_tabla(tabla, nombre_tabla)

                    # Opciones de guardado al modificar
                    guardar_choice = input("üíæ Guardar cambios para esta tabla ahora? (C)SV / (J)SON / (B)oth / (N)o: ").strip().lower()
                    if guardar_choice == 'c':
                        pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                        print("‚úÖ Guardado CSV de la tabla.")
                    elif guardar_choice == 'j':
                        exportar_tabla_json(tabla, nombre_tabla)
                    elif guardar_choice == 'b':
                        pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                        exportar_tabla_json(tabla, nombre_tabla)

                else:
                    print("‚ùå ID fuera de rango.")

            elif accion == "b":
                if not id_field:
                    print("‚ùå No se puede identificar el campo ID para borrar")
                    continue
                    
                try:
                    # Pedir el ID real de la base de datos, no el √≠ndice autom√°tico
                    id_valor = input(f"üóëÔ∏è  Ingrese el {id_field} del registro a borrar: ").strip()
                    # Buscar el registro por el ID real usando comparaci√≥n normalizada
                    registro_idx = None
                    for idx, registro in enumerate(tabla):
                        registro_id_valor = registro.get(id_field, '')
                        # Normalizar ambos valores para comparaci√≥n
                        if normalize_id_value(registro_id_valor) == normalize_id_value(id_valor):
                            registro_idx = idx
                            break
                    
                    if registro_idx is None:
                        print(f"‚ùå No se encontr√≥ registro con {id_field} = {id_valor}")
                        continue
                        
                except ValueError:
                    print("‚ùå Ingrese un valor v√°lido.")
                    continue

                if 0 <= registro_idx < len(tabla):
                    # No borrar/alterar campos id: vaciar solo campos modificables
                    campos_no_id = get_modifiable_fields(tabla[registro_idx])
                    for campo in campos_no_id:
                        tabla[registro_idx][campo] = ""
                    print(f"‚úÖ Registro {id_field} {id_valor} vaciado (campos no id).")
                    mostrar_tabla(tabla, nombre_tabla)

                    # Preguntar guardar tras borrar/vaciar campos
                    guardar_choice = input("üíæ Guardar cambios para esta tabla ahora? (C)SV / (J)SON / (B)oth / (N)o: ").strip().lower()
                    if guardar_choice == 'c':
                        pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                        print("‚úÖ Guardado CSV de la tabla.")
                    elif guardar_choice == 'j':
                        exportar_tabla_json(tabla, nombre_tabla)
                    elif guardar_choice == 'b':
                        pd.DataFrame(tabla).to_csv(os.path.join(CARPETA, f"{nombre_tabla}.csv"), index=False)
                        exportar_tabla_json(tabla, nombre_tabla)
                else:
                    print("‚ùå ID fuera de rango.")

            elif accion == "e":
                # Exportar tabla a JSON
                exportar_tabla_json(tabla, nombre_tabla)
                print("‚úÖ Exportaci√≥n completada.")

            else:
                print("‚ùå Acci√≥n no v√°lida. Use A, M, B, E o V")


# Helpers nuevos: detectar campos num√©ricos y parsear entradas de usuario
def is_numeric_field(field_name: str) -> bool:
    n = (field_name or "").strip().lower()
    keywords = ("precio", "importe", "valor", "stock", "cantidad", "qty", "monto", "total", "cost", "coste", "id_")
    return any(k in n for k in keywords)


def parse_input_value(field_name: str, value: str):
    """Convierte la entrada (string) a int/float/None seg√∫n el nombre del campo y contenido."""
    if value is None:
        return pd.NA
    v = str(value).strip()
    if v == "":
        return pd.NA
    
    # Si el campo es num√©rico o es un campo ID, intentar convertir a n√∫mero
    if is_numeric_field(field_name) or is_id_field(field_name):
        # quitar s√≠mbolos comunes (moneda, espacios, comas)
        cleaned = v.replace("$", "").replace("k", "000").replace("K", "000").replace(",", "").strip()
        
        try:
            # Convertir a float primero
            float_val = float(cleaned)
            # Si es un n√∫mero entero (sin parte decimal), devolver como int
            if float_val.is_integer():
                return int(float_val)
            if math.isfinite(float_val):
                return float_val
            return pd.NA
        except Exception:
            # Si no se puede convertir, devolver el string original
            return v
    
    # Si no es num√©rico devolver el string
    return v


if __name__ == "__main__":
    # Verificar si tabulate est√° instalado
    try:
        from tabulate import tabulate
    except ImportError:
        print("‚ùå Error: La librer√≠a 'tabulate' no est√° instalada.")
        print("üí° Inst√°lala con: pip install tabulate")
        exit(1)
    
    menu()
    
    
    
    
    
    
    # GENERACION DE INFORME 
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import os
import math
from datetime import datetime

def generar_informe_explicativo():
    """Genera un PDF explicativo del sistema de gesti√≥n de base de datos"""
    
    with PdfPages('Informe_Sistema_Gestion_BD.pdf') as pdf:
        
        # P√°gina 1: Portada
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.7, 'INFORME EXPLICATIVO', 
                ha='center', va='center', fontsize=24, fontweight='bold')
        plt.text(0.5, 0.6, 'SISTEMA DE GESTI√ìN DE BASE DE DATOS', 
                ha='center', va='center', fontsize=18, style='italic')
        plt.text(0.5, 0.5, 'An√°lisis T√©cnico y Funcional', 
                ha='center', va='center', fontsize=14)
        
        # Informaci√≥n del sistema
        info_texto = f"""
        DESCRIPCI√ìN GENERAL:
        ‚Ä¢ Sistema completo de gesti√≥n de bases de datos en CSV/JSON
        ‚Ä¢ Interfaz de l√≠nea de comandos interactiva
        ‚Ä¢ Soporte para m√∫ltiples tablas relacionadas
        ‚Ä¢ Funciones CRUD completas (Crear, Leer, Actualizar, Eliminar)
        
        CARACTER√çSTICAS PRINCIPALES:
        ‚Ä¢ Gesti√≥n autom√°tica de campos ID
        ‚Ä¢ Exportaci√≥n a m√∫ltiples formatos
        ‚Ä¢ Validaci√≥n y normalizaci√≥n de datos
        ‚Ä¢ Interfaz intuitiva con men√∫s jer√°rquicos
        
        Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """
        
        plt.text(0.1, 0.3, info_texto, ha='left', va='top', fontsize=11,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightblue", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 2: Arquitectura del Sistema
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'ARQUITECTURA DEL SISTEMA', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        arquitectura_texto = """
        COMPONENTES PRINCIPALES:
        
        1. GESTI√ìN DE ARCHIVOS
           ‚Ä¢ Carga autom√°tica de tablas desde archivos CSV
           ‚Ä¢ Exportaci√≥n a formatos CSV y JSON
           ‚Ä¢ Manejo robusto de errores de archivos
           ‚Ä¢ Creaci√≥n autom√°tica de directorios
        
        2. GESTI√ìN DE DATOS
           ‚Ä¢ Detecci√≥n autom√°tica de campos ID
           ‚Ä¢ Generaci√≥n inteligente de nuevos IDs
           ‚Ä¢ Normalizaci√≥n de valores num√©ricos
           ‚Ä¢ Validaci√≥n y parsing de entradas
        
        3. INTERFAZ DE USUARIO
           ‚Ä¢ Men√∫ principal con lista de tablas
           ‚Ä¢ Submen√∫s espec√≠ficos por tabla
           ‚Ä¢ Operaciones CRUD individuales
           ‚Ä¢ Confirmaciones de guardado
        
        4. FUNCIONALIDADES AVANZADAS
           ‚Ä¢ Detecci√≥n de campos modificables
           ‚Ä¢ Comparaci√≥n normalizada de IDs
           ‚Ä¢ Sanitizaci√≥n de datos para JSON
           ‚Ä¢ Formateo tabular de salida
        
        ESTRUCTURA DE DATOS:
        ‚Ä¢ Diccionario principal: tablas['nombre_tabla'] = lista_de_registros
        ‚Ä¢ Cada registro: diccionario con campos->valores
        ‚Ä¢ Soporte para tipos mixtos (strings, n√∫meros, nulos)
        """
        
        plt.text(0.1, 0.75, arquitectura_texto, ha='left', va='top', fontsize=10,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightgreen", alpha=0.7))
        
        # Diagrama conceptual simple
        diagrama_texto = """
        FLUJO DE DATOS:
        
        Archivos CSV ‚Üí Diccionario Python ‚Üí Operaciones CRUD ‚Üí Archivos CSV/JSON
              ‚Üë               ‚Üë                   ‚Üë                 ‚Üë
           Carga           Memoria            Modificaci√≥n      Persistencia
           Inicial        Principal            Usuario          Cambios
        
        MEN√ö JER√ÅRQUICO:
        
        Men√∫ Principal ‚Üí Selecci√≥n Tabla ‚Üí Submen√∫ CRUD ‚Üí Guardado
              ‚Üì                   ‚Üì              ‚Üì            ‚Üì
          Lista tablas        Tabla espec√≠fica  A/M/B/E    Confirmaci√≥n
        """
        
        plt.text(0.1, 0.3, diagrama_texto, ha='left', va='top', fontsize=10,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightyellow", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 3: Funciones Helper Explicadas
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'FUNCIONES HELPER Y UTILIDADES', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        helpers_texto = """
        FUNCIONES PRINCIPALES DE IDENTIFICACI√ìN:
        
        is_id_field(field_name):
        ‚Ä¢ Detecta campos que son identificadores
        ‚Ä¢ Reglas: empieza con 'id', contiene 'id_', termina con '_id'
        ‚Ä¢ Ejemplos: 'id', 'id_cliente', 'producto_id', 'ID'
        
        get_main_id_field(registro):
        ‚Ä¢ Encuentra el campo ID principal de un registro
        ‚Ä¢ Prioriza campos que empiezan con 'id_' o son exactamente 'id'
        
        get_modifiable_fields(registro):
        ‚Ä¢ Devuelve campos que pueden modificarse (excluye IDs)
        ‚Ä¢ Permite operaciones seguras de modificaci√≥n
        
        GENERACI√ìN Y NORMALIZACI√ìN:
        
        generate_new_id(tabla, id_field):
        ‚Ä¢ Genera nuevo ID como m√°ximo existente + 1
        ‚Ä¢ Maneja conversi√≥n robusta de tipos num√©ricos
        ‚Ä¢ Fallback a longitud actual si hay errores
        
        normalize_id_value(value):
        ‚Ä¢ Normaliza valores ID para comparaci√≥n consistente
        ‚Ä¢ Convierte a float‚Üíint si es posible
        ‚Ä¢ Maneja valores nulos, vac√≠os y strings
        
        is_numeric_field(field_name):
        ‚Ä¢ Detecta campos que probablemente son num√©ricos
        ‚Ä¢ Keywords: 'precio', 'stock', 'cantidad', 'monto', 'total'
        
        parse_input_value(field_name, value):
        ‚Ä¢ Convierte entrada de usuario al tipo apropiado
        ‚Ä¢ Limpia s√≠mbolos de moneda, comas, etc.
        ‚Ä¢ Convierte a int/float seg√∫n el campo
        """
        
        plt.text(0.1, 0.7, helpers_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightcoral", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 4: Gesti√≥n de Archivos y Persistencia
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'GESTI√ìN DE ARCHIVOS Y PERSISTENCIA', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        archivos_texto = """
        FUNCIONES DE CARGA:
        
        cargar_tablas():
        ‚Ä¢ Carga todas las tablas definidas en el mapping
        ‚Ä¢ Maneja archivos faltantes creando tablas vac√≠as
        ‚Ä¢ Convierte DataFrames pandas a listas de diccionarios
        ‚Ä¢ Mapping predefinido para 10 tablas diferentes
        
        TABLAS SOPORTADAS:
        ‚Ä¢ clientes, localidades, provincias, productos
        ‚Ä¢ rubros, sucursales, facturaenc, facturadet
        ‚Ä¢ ventas, proveedores
        
        FUNCIONES DE GUARDADO:
        
        guardar_todo(tablas):
        ‚Ä¢ Guarda todas las tablas en archivos CSV
        ‚Ä¢ Crea directorios si no existen
        ‚Ä¢ Manejo robusto de errores de escritura
        
        guardar_todo_json(tablas):
        ‚Ä¢ Exporta todas las tablas a formato JSON
        ‚Ä¢ Usa sanitizaci√≥n para tipos no serializables
        ‚Ä¢ Maneja NaN/NaT/inf convirti√©ndolos a null
        
        exportar_tabla_json(tabla, nombre):
        ‚Ä¢ Exporta tabla individual a JSON
        ‚Ä¢ Sanitiza valores: pandas NA ‚Üí None, numpy ‚Üí nativos
        ‚Ä¢ Convierte timestamps a formato ISO
        ‚Ä¢ Encoding UTF-8 con indentaci√≥n para legibilidad
        
        CARACTER√çSTICAS DE PERSISTENCIA:
        ‚Ä¢ Guardado autom√°tico tras operaciones CRUD
        ‚Ä¢ Opciones: CSV, JSON, o ambos
        ‚Ä¢ Confirmaci√≥n de usuario antes de guardar
        ‚Ä¢ Mensajes de estado claros
        """
        
        plt.text(0.1, 0.7, archivos_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightseagreen", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 5: Interfaz de Usuario y Navegaci√≥n
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'INTERFAZ DE USUARIO Y NAVEGACI√ìN', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        interfaz_texto = """
        ESTRUCTURA DE MEN√öS:
        
        MEN√ö PRINCIPAL:
        ‚Ä¢ Lista numerada de todas las tablas disponibles
        ‚Ä¢ Muestra conteo de registros por tabla
        ‚Ä¢ Opciones globales: Guardar todo (CSV/JSON), Salir
        ‚Ä¢ Validaci√≥n de entrada num√©rica
        
        SUBMEN√ö POR TABLA:
        ‚Ä¢ (A)gregar: Crea nuevo registro con ID autom√°tico
        ‚Ä¢ (M)odificar: Edita campos existentes por ID
        ‚Ä¢ (B)orrar: Vac√≠a campos no-ID (preserva estructura)
        ‚Ä¢ (E)xportar: Exporta tabla individual a JSON
        ‚Ä¢ (V)olver: Regresa al men√∫ principal
        
        FUNCIONALIDADES DE VISUALIZACI√ìN:
        
        mostrar_tabla(tabla, nombre):
        ‚Ä¢ Muestra tabla formateada con tabulate
        ‚Ä¢ Normaliza valores num√©ricos (elimina .0 decimal)
        ‚Ä¢ Reemplaza valores vac√≠os/nulos por '-'
        ‚Ä¢ Oculta √≠ndices autom√°ticos, muestra solo IDs reales
        ‚Ä¢ Encabezados claros con conteo de registros
        
        EXPERIENCIA DE USUARIO:
        ‚Ä¢ Mensajes descriptivos con emojis
        ‚Ä¢ Validaci√≥n en tiempo real
        ‚Ä¢ Confirmaciones antes de acciones destructivas
        ‚Ä¢ Feedback inmediato de operaciones
        ‚Ä¢ Opciones de guardado flexibles
        """
        
        plt.text(0.1, 0.7, interfaz_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="gold", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 6: Operaciones CRUD Detalladas
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'OPERACIONES CRUD DETALLADAS', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        crud_texto = """
        AGREGAR (A):
        1. Genera autom√°ticamente nuevo ID
        2. Solicita valores para campos no-ID
        3. Parsea entradas seg√∫n tipo de campo
        4. Agrega registro a la tabla en memoria
        5. Muestra tabla actualizada
        6. Ofrece opciones de guardado
        
        MODIFICAR (M):
        1. Solicita ID del registro a modificar
        2. Busca usando comparaci√≥n normalizada
        3. Muestra campos modificables con valores actuales
        4. Permite modificar campo individual o todos
        5. Actualiza solo campos con nuevos valores
        6. Ofrece opciones de guardado
        
        BORRAR (B):
        1. Solicita ID del registro a "borrar"
        2. En lugar de eliminar, vac√≠a campos no-ID
        3. Preserva campos ID y estructura del registro
        4. Mantiene integridad referencial
        5. Ofrece opciones de guardado
        
        EXPORTAR (E):
        1. Exporta tabla actual a JSON
        2. Aplica sanitizaci√≥n completa
        3. Mantiene estructura de datos original
        
        CARACTER√çSTICAS DE SEGURIDAD:
        ‚Ä¢ No se permiten modificaciones en campos ID
        ‚Ä¢ Validaci√≥n de existencia de registros
        ‚Ä¢ Preservaci√≥n de estructura de datos
        ‚Ä¢ Confirmaciones antes de guardar
        """
        
        plt.text(0.1, 0.7, crud_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightpink", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 7: Manejo de Errores y Robustez
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'MANEJO DE ERRORES Y ROBUSTEZ', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        errores_texto = """
        ESTRATEGIAS DE MANEJO DE ERRORES:
        
        1. ARCHIVOS:
           ‚Ä¢ Verifica existencia de archivos antes de cargar
           ‚Ä¢ Crea tablas vac√≠as para archivos faltantes
           ‚Ä¢ Maneja excepciones de lectura/escritura
           ‚Ä¢ Proporciona mensajes de error descriptivos
        
        2. DATOS:
           ‚Ä¢ Conversi√≥n segura de tipos num√©ricos
           ‚Ä¢ Manejo de valores nulos/vac√≠os
           ‚Ä¢ Normalizaci√≥n para comparaciones
           ‚Ä¢ Parsing robusto de entradas de usuario
        
        3. INTERFAZ:
           ‚Ä¢ Validaci√≥n de entradas num√©ricas
           ‚Ä¢ Manejo de opciones inv√°lidas
           ‚Ä¢ Verificaci√≥n de rangos y existencia
           ‚Ä¢ Recuperaci√≥n graceful de errores
        
        4. SERIALIZACI√ìN:
           ‚Ä¢ Sanitizaci√≥n de tipos no serializables
           ‚Ä¢ Manejo de valores especiales (NaN, inf)
           ‚Ä¢ Conversi√≥n de tipos numpy/pandas
           ‚Ä¢ Encoding UTF-8 expl√≠cito
        
        CARACTER√çSTICAS DE ROBUSTEZ:
        ‚Ä¢ El sistema nunca crashea por datos inv√°lidos
        ‚Ä¢ Mensajes de error informativos
        ‚Ä¢ Estado consistente tras errores
        ‚Ä¢ Capacidad de recuperaci√≥n
        ‚Ä¢ Preservaci√≥n de datos existentes
        """
        
        plt.text(0.1, 0.7, errores_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="plum", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()
        
        # P√°gina 8: Conclusi√≥n y Caracter√≠sticas Destacadas
        fig = plt.figure(figsize=(11.69, 8.27))
        plt.axis('off')
        
        plt.text(0.5, 0.95, 'CONCLUSI√ìN Y CARACTER√çSTICAS DESTACADAS', 
                ha='center', va='center', fontsize=18, fontweight='bold')
        
        conclusion_texto = """
        RESUMEN DEL SISTEMA:
        
        FORTALEZAS PRINCIPALES:
        ‚úÖ Gesti√≥n autom√°tica e inteligente de IDs
        ‚úÖ Interfaz intuitiva con navegaci√≥n jer√°rquica
        ‚úÖ Soporte m√∫ltiple de formatos (CSV/JSON)
        ‚úÖ Operaciones CRUD completas y seguras
        ‚úÖ Manejo robusto de errores y datos inv√°lidos
        ‚úÖ Normalizaci√≥n inteligente de valores
        ‚úÖ Persistencia flexible con confirmaciones
        
        INNOVACIONES T√âCNICAS:
        ‚Ä¢ Detecci√≥n autom√°tica de campos ID y num√©ricos
        ‚Ä¢ Generaci√≥n inteligente de IDs secuenciales
        ‚Ä¢ Comparaci√≥n normalizada para b√∫squedas
        ‚Ä¢ Sanitizaci√≥n completa para serializaci√≥n JSON
        ‚Ä¢ Parsing contextual de entradas de usuario
        ‚Ä¢ Preservaci√≥n de estructura en operaciones de borrado
        
        USO PR√ÅCTICO:
        ‚Ä¢ Ideal para bases de datos peque√±as/medianas
        ‚Ä¢ Perfecto para prototipado y desarrollo
        ‚Ä¢ Excelente para migraciones entre formatos
        ‚Ä¢ √ötil para ense√±anza de conceptos de BD
        ‚Ä¢ Flexible para personalizaci√≥n y extensi√≥n
        
        POTENCIALES MEJORAS:
        ‚Ä¢ Agregar validaciones de integridad referencial
        ‚Ä¢ Implementar b√∫squedas y filtros avanzados
        ‚Ä¢ Agregar soporte para transacciones
        ‚Ä¢ Implementar logging de operaciones
        ‚Ä¢ Agregar interfaz web o gr√°fica
        """
        
        plt.text(0.1, 0.7, conclusion_texto, ha='left', va='top', fontsize=9,
                bbox=dict(boxstyle="round,pad=1", facecolor="lightsteelblue", alpha=0.7))
        
        pdf.savefig(fig)
        plt.close()

# Generar el informe
print("üìä Generando informe explicativo del sistema...")
generar_informe_explicativo()
print("‚úÖ Informe generado: 'Informe_Sistema_Gestion_BD.pdf'")
print("üìÑ El PDF contiene 8 p√°ginas con an√°lisis completo del sistema")